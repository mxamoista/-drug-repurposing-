#==========================
######## Compute connectivity scores of LINCS
C1_dz_cmap_scores <- NULL
count <- 0
C1_dz_cmap_scores <- numeric()  # Initialize if not already done
landmark <- 0
load(file='./lincs_myself/github/C1_sig_info_selected.RData')
load(file='./lincs_myself/github/C1_lincs_signature_PC3_6h_allconcentration.RData')

#cmap_score function
cmap_score <- function(sig_up, sig_down, drug_signature) {
  # Note. I think that creating the anonymous functions in each iteration of the sapply's below is slowing things down. Predefine them eventually.
  num_genes <- nrow(drug_signature)
  ks_up <- 0
  ks_down <- 0
  connectivity_score <- 0
  
  # I think we are re-ranking because the GeneID mapping changed the original rank range
  drug_signature[,"rank"] <- rank(drug_signature[,"rank"])
  
  # Merge the drug signature with the disease signature by GeneID. This becomes the V(j) from the algorithm description
  up_tags_rank <- merge(drug_signature, sig_up, by.x = "ids", by.y = 1)
  down_tags_rank <- merge(drug_signature, sig_down, by.x = "ids", by.y = 1)
  
  up_tags_position <- sort(up_tags_rank$rank)
  down_tags_position <- sort(down_tags_rank$rank)
  
  num_tags_up <- length(up_tags_position)
  num_tags_down <- length(down_tags_position)
  
  # 
  if(num_tags_up > 1 || num_tags_down > 1) {
    a_up <- 0
    b_up <- 0
    
    a_up <- max(sapply(1:num_tags_up,function(j) {
      j/num_tags_up - up_tags_position[j]/num_genes
    }))
    b_up <- max(sapply(1:num_tags_up,function(j) {
      up_tags_position[j]/num_genes - (j-1)/num_tags_up
    }))
    
    if(a_up > b_up) {
      ks_up <- a_up
    } else {
      ks_up <- -b_up
    }
    
    a_down <- 0
    b_down <- 0
    
    a_down <- max(sapply(1:num_tags_down,function(j) {
      j/num_tags_down - down_tags_position[j]/num_genes
    }))
    b_down <- max(sapply(1:num_tags_down,function(j) {
      down_tags_position[j]/num_genes - (j-1)/num_tags_down
    }))
    
    if(a_down > b_down) {
      ks_down <- a_down
    } else {
      ks_down <- -b_down
    }
    
    if (sum(sign(c(ks_down,ks_up))) == 0) {
      connectivity_score <- ks_up - ks_down # different signs
    }
  }
  return(connectivity_score)
}

#Assign each drug a CMap score
for (exp_id in rownames(C1_sig_info_selected)) {
  count <- count + 1
  print(paste("Processing item", count, "- exp_id:", exp_id))
  
  id <- which(colnames(C1_lincs_signature_selected) == exp_id)
  
  if (length(id) == 0) {
    print(paste("Warning: exp_id", exp_id, "not found in colnames of lincs_signature_selected"))
    next  # Skip to the next iteration
  }
  
  if (id <= ncol(C1_lincs_signature_selected)) {
    if (landmark == 1) {
      C1_cmap_exp_signature <- data.frame(C1_gene.list, rank(-1 * C1_lincs_signature_selected[, id], ties.method="random"))    
    } else {
      C1_cmap_exp_signature <- data.frame(C1_gene.list, C1_lincs_signature_selected[, id])    
    }
    colnames(C1_cmap_exp_signature) <- c("ids", "rank")
    C1_dz_cmap_scores <- c(C1_dz_cmap_scores, cmap_score(C1_dz_genes_up, C1_dz_genes_down, C1_cmap_exp_signature))
  } else {
    print(paste("Warning: id", id, "is out of range for lincs_signature_selected"))
  }
}
save(C1_dz_cmap_scores,file='./lincs_myself/github/C1_dz_cmap_scoress_PC3_6h_allconcentration.RData')

#==========================
######## Compute the cmap randoms
N_PERMUTATIONS <- 100000 #default 100000
C1_random_sig_ids <- sample(colnames(C1_lincs_signature_selected),N_PERMUTATIONS,replace=T)
count <- 0
C1_random_cmap_scores <- NULL
for (exp_id in C1_random_sig_ids){
  count <- count + 1
  print(paste("Processing item", count, "- exp_id:", exp_id))
  id <- which(colnames(C1_lincs_signature_selected) == exp_id)
  print(count)
  if (landmark ==1){
    C1_cmap_exp_signature_randoms <- data.frame(C1_gene.list,  rank(-1 * C1_lincs_signature_selected[, id], ties.method="random"))    
  }else{
    C1_cmap_exp_signature_randoms <- data.frame(C1_gene.list,  C1_lincs_signature_selected[, id])    
  }
  colnames(C1_cmap_exp_signature_randoms) <- c("ids","rank")
  
  C1_random_input_signature_genes <- sample(C1_gene.list, (nrow(C1_dz_genes_up)+nrow(C1_dz_genes_down)))
  C1_rand_dz_gene_up <- data.frame(GeneID=C1_random_input_signature_genes[1:nrow(C1_dz_genes_up)])
  C1_rand_dz_gene_down <- data.frame(GeneID=C1_random_input_signature_genes[(nrow(C1_dz_genes_up)+1):length(C1_random_input_signature_genes)])
  C1_random_cmap_scores <- c(C1_random_cmap_scores, cmap_score(C1_rand_dz_gene_up,C1_rand_dz_gene_down,C1_cmap_exp_signature_randoms))
}
#rand_cmap_scores <- random_cmap_scores 
save(C1_random_cmap_scores,file='./lincs_myself/github/C1_random_cmap_PC3_6h_allconcentration.RData')

#==========================
######## Compute the significance and save the min score of the same drug
print("Loading random scores for subset")
load('./lincs_myself/github/C1_random_cmap_PC3_6h_allconcentration.RData')
C1_random_scores <- unlist(C1_random_cmap_scores)
# Frequency-based p-value using absolute scores from sampling distribution to approximate two-tailed p-value
print("COMPUTING p-values")
C1_p_values <- sapply(C1_dz_cmap_scores,function(score) {
  length(which(abs(C1_random_scores) >= abs(score))) / length(C1_random_scores)
})
print("COMPUTING q-values")
library(qvalue)
C1_q_values <- qvalue(C1_p_values)$qvalues

#get candidate drugs
C1_sig_info_selected$id <- rownames(C1_sig_info_selected)
C1_sig_info_selected <- C1_sig_info_selected[!duplicated(C1_sig_info_selected$id),]
C1_sig.ids <- C1_sig_info_selected$id
C1_drugs <- data.frame(exp_id = C1_sig.ids, cmap_score = C1_dz_cmap_scores, p = C1_p_values, q = C1_q_values)
C1_results = list(C1_drugs, C1_dz_signature)
C1_drug_preds <- C1_results[[1]] #from cmap_predictions.RData
dz_signature <- C1_results[[2]]
C1_drug_instances_all <- merge(C1_drugs, C1_sig_info_selected, by.x="exp_id", by.y="id")
save(C1_drug_instances_all, file=("./lincs_myself/C1_lincs_predictions_PC3_6h_allconcentration.RData"))

# min score of the same drug
C1_drug_all_min_score <- aggregate(cmap_score ~ pert_iname,C1_drug_instances_all, min)
C1_drug_all_min_score <- C1_drug_all_min_score[order(C1_drug_all_min_score$cmap_score), ]
C1_drug_all_min_score$rank <- 1:nrow(C1_drug_all_min_score )
C1_cmap = data.frame(row.names = as.factor(C1_drug_all_min_score$rank),cmap_score=as.factor(C1_drug_all_min_score$cmap_score), drug=as.factor(C1_drug_all_min_score$pert_iname) )
C1_cmap <- C1_cmap[order(C1_cmap$cmap_score),]
C1_cmap$rank <- 1:nrow(C1_cmap)
C1_cmap$cmap_score <- as.numeric(as.character(C1_cmap$cmap_score))
C1_cmap$rank <- as.numeric(C1_cmap$rank)

#==========================
######## Draw the CMap score plot in Fig.3e
library(ggplot2)
library(grid)
library(gridExtra)
# Base plot
# Select multiple compounds for labeling
label_compounds_C1 <- C1_cmap[C1_cmap$drug %in% c("glutamine"), ]
library(ggrepel)
p_C1 <- ggplot(C1_cmap, aes(x = rank, y = cmap_score)) +
  geom_point(size = 3, color = "black") +
  geom_line() +
  geom_hline(yintercept = 0, color = "gray50") +
  theme_minimal() +
  labs(x = "Compound rank", y = "CMap score", 
       title = "CMap score for C1") +
  scale_x_continuous(limits = c(0, max(C1_cmap$rank)), 
                     expand = c(0.02, 0)) +
  scale_y_continuous(limits = c(min(C1_cmap$cmap_score), max(C1_cmap$cmap_score)), 
                     expand = c(0.02, 0)) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(color = "black"),
        plot.margin = margin(10, 10, 10, 10),
        axis.text = element_text(size = 12, face = "bold"),  # Increase text size and make bold
        axis.title = element_text(size = 14, face = "bold"),  # Increase title size and make bold
        axis.ticks = element_line(color = "black", size = 0.5),  # Make ticks more visible
        axis.ticks.length = unit(0.2, "cm"))

# Add stacked line effect for multiple compounds
p_C1 <- p_C1 +
  geom_point(data = label_compounds_C1, aes(x = rank, y = cmap_score), 
             color = "red", size = 3) +
  geom_text_repel(data = label_compounds_C1, 
                  aes(x = rank, y = cmap_score, 
                      label = paste0(drug, "\n", round(cmap_score, 4))),
                  color = "red", box.padding = 2, point.padding = 2, size = 6)
