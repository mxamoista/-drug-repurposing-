library(DESeq2)
library(qvalue)
library("gplots")
library(RColorBrewer)
library("plyr")
library(grid)
k<-4
dataset <- get_processed_dataset(sce.final)
hc <- metadata(sce.final)$sc3$consensus[[as.character(k)]]$hc
col_data <- colData(sce.final)
table(col_data[,"sc3_4_clusters"])
ht_ann <- col_data

ht_ann$sc3_4_clusters  <- sub("^1","C1",ht_ann$sc3_4_clusters)
ht_ann$sc3_4_clusters  <- sub("^2","C2",ht_ann$sc3_4_clusters)
ht_ann$sc3_4_clusters  <- sub("^3","C3",ht_ann$sc3_4_clusters)
ht_ann$sc3_4_clusters  <- sub("^4","C4",ht_ann$sc3_4_clusters)

annotation_col = data.frame(row.names = rownames(ht_ann), cluster=as.factor(ht_ann$sc3_4_clusters)) 

C1 <- annotation_col[annotation_col$cluster == "C1", , drop = FALSE]
C2 <- annotation_col[annotation_col$cluster == "C2", , drop = FALSE]
C3 <- annotation_col[annotation_col$cluster == "C3", , drop = FALSE]
C4 <- annotation_col[annotation_col$cluster == "C4", , drop = FALSE]

C1.matrix <- matrix.filter.final[,rownames(C1)]
C2.matrix <- matrix.filter.final[,rownames(C2)]
C3.matrix <- matrix.filter.final[,rownames(C3)]
C4.matrix <- matrix.filter.final[,rownames(C4)]

C4VSOthers.matrix <- cbind(C1.matrix,C2.matrix,C3.matrix)
C4VSOthers<-cbind(C4VSOthers.matrix ,C4.matrix)
matrix.roundC4VSOthers <- round(C4VSOthers)
conditionC4VSOthers <- factor(c(rep("Others",106),rep("C4",25)))
colDataC4VSOthers <- data.frame(
  sample_id = colnames(C4VSOthers),
  conditionC4VSOther = conditionC4VSOthers,
  stringsAsFactors = FALSE
)

# Ensure the condition column is a factor with "Others" as the reference level
colDataC4VSOthers$conditionC4VSOthers <- factor(colDataC4VSOthers$conditionC4VSOther, levels = c("Others", "C4"))

ddsC4VSOthers <- DESeqDataSetFromMatrix(countData = matrix.roundC4VSOthers,
                                        colData = colDataC4VSOthers,
                                        design = ~ conditionC4VSOthers)
# Run the DESeq analysis
ddsC4VSOthers <- DESeq(ddsC4VSOthers)

# Get the results, with "C4" compared to "Others" (the default behavior)
resC4VSOthers <- results(ddsC4VSOthers)

resC4VSOthers <- data.frame(resC4VSOthers, stringsAsFactors = FALSE, check.names = FALSE)# res format conversion: use data.frame to convert to table form

resC4VSOthers$gene <- rownames(resC4VSOthers)

resC4VSOthers <- subset(resC4VSOthers, padj < 1E-2 & abs(log2FoldChange) > 1 & abs(log2FoldChange) != Inf)

# transfer gene into GeneID
library(biomaRt)
# Connect to the human genes dataset
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")

# Get the mapping
gene_ids_C4 <- getBM(attributes=c("hgnc_symbol", "entrezgene_id"),
                     filters="hgnc_symbol",
                     values=rownames(resC4VSOthers),
                     mart=mart)

# Merge with your dataframe
C4_dz_signature <- merge(resC4VSOthers, gene_ids_C4, by.x="gene", by.y="hgnc_symbol", all.x=TRUE)
C4_dz_signature$entrezgene_id
#for cmap, more stringent
C4_dz_signature <- subset(C4_dz_signature, !is.na(entrezgene_id) & entrezgene_id !='?')

C4_dz_signature <- subset(C4_dz_signature, select=c("entrezgene_id","gene", "log2FoldChange", "padj"))
names(C4_dz_signature) <- c("GeneID", "Symbol", "value", "padj")
C4_dz_signature <- subset(C4_dz_signature, !is.na(value))
C4_dz_signature <- C4_dz_signature[order(C4_dz_signature$value),]

C4_dz_signature$up_down <- "up"
C4_dz_signature$up_down[C4_dz_signature$value < 0] <- "down"

#gene.list
gene.list <- landmark_data$pr_gene_id

#load gist genes
C4_dz_signature <- subset(C4_dz_signature, GeneID %in% gene.list)
C4_dz_genes_up <- subset(C4_dz_signature,up_down=="up",select="GeneID")
C4_dz_genes_down <- subset(C4_dz_signature,up_down=="down",select="GeneID")

######## COMPUTE_CONNECTIVITY SCORE OF LINCS
C4_dz_cmap_scores <- NULL
count <- 0
C4_dz_cmap_scores <- numeric()  # Initialize if not already done
landmark <- 0
for (exp_id in rownames(C4_sig_info_selected)) {
  count <- count + 1
  print(paste("Processing item", count, "- exp_id:", exp_id))
  
  id <- which(colnames(C4_lincs_signature_selected) == exp_id)
  
  if (length(id) == 0) {
    print(paste("Warning: exp_id", exp_id, "not found in colnames of lincs_signature_selected"))
    next  # Skip to the next iteration
  }
  
  if (id <= ncol(C4_lincs_signature_selected)) {
    if (landmark == 1) {
      C4_cmap_exp_signature <- data.frame(gene.list, rank(-1 * C4_lincs_signature_selected[, id], ties.method="random"))    
    } else {
      C4_cmap_exp_signature <- data.frame(gene.list, C4_lincs_signature_selected[, id])    
    }
    colnames(C4_cmap_exp_signature) <- c("ids", "rank")
    C4_dz_cmap_scores <- c(C4_dz_cmap_scores, cmap_score(C4_dz_genes_up, C4_dz_genes_down, C4_cmap_exp_signature))
  } else {
    print(paste("Warning: id", id, "is out of range for lincs_signature_selected"))
  }
}

# Compute the significance
print("Loading random scores for subset")
load('./lincs_myself/C4_cmap_randoms.RData')
random_scores <- unlist(rand_cmap_scores)
# Frequency-based p-value using absolute scores from sampling distribution to approximate two-tailed p-value
print("COMPUTING p-values")
p_values <- sapply(dz_cmap_scores,function(score) {
  length(which(abs(random_scores) >= abs(score))) / length(random_scores)
})
print("COMPUTING q-values")
library(qvalue)
q_values <- qvalue(p_values)$qvalues


#lincs_signatures <- lincs_signatures[, 1:1000]
C4_sig_info_selected$id <- rownames(C4_sig_info_selected)
#remove duplicate instances
C4_sig_info_selected <- C4_sig_info_selected[!duplicated(C4_sig_info_selected$id),]
C4_sig.ids <- C4_sig_info_selected$id

C4_drugs <- data.frame(exp_id = C4_sig.ids, cmap_score = C4_dz_cmap_scores)
drugs <- data.frame(exp_id = sig.ids, cmap_score = dz_cmap_scores, p = p_values, q = q_values)
results = list(drugs, C4_dz_signature)

drug_preds <- results[[1]] #from cmap_predictions.RData
dz_signature <- results[[2]]
C4_drug_instances_all <- merge(C4_drugs, C4_sig_info_selected, by.x="exp_id", by.y="id")
save(drug_instances_all, file=("./lincs_myself/lincs_predictions_C4_MCF7_6h_allconcentration.RData"))

# min score of the same drug
C4_drug_all_min_score <- aggregate(cmap_score ~ pert_iname,drug_instances_all, min)
C4_drug_all_min_score <- C4_drug_all_min_score[order(C4_drug_all_min_score$cmap_score), ]

C4_drug_all_min_score$rank <- 1:nrow(C4_drug_all_min_score )
C4_cmap = data.frame(row.names = as.factor(C4_drug_all_min_score$rank),cmap_score=as.factor(C4_drug_all_min_score$cmap_score), drug=as.factor(C4_drug_all_min_score$pert_iname) )
C4_cmap <- C4_cmap[order(C4_cmap$cmap_score),]
C4_cmap$rank <- 1:nrow(C4_cmap)
C4_cmap$cmap_score <- as.numeric(as.character(C4_cmap$cmap_score))
C4_cmap$rank <- as.numeric(C4_cmap$rank)

library(ggplot2)
library(grid)
library(gridExtra)
# Base plot
# Select multiple compounds for labeling
label_compounds_C4 <- C4_cmap[C4_cmap$drug %in% c("glutamine"), ]
library(ggrepel)
p_C4 <- ggplot(C4_cmap, aes(x = rank, y = cmap_score)) +
  geom_point(size = 3, color = "black") +
  geom_line() +
  geom_hline(yintercept = 0, color = "gray50") +
  theme_minimal() +
  labs(x = "Compound rank", y = "CMap score", 
       title = "CMap score for C4") +
  scale_x_continuous(limits = c(0, max(C4_cmap$rank)), 
                     expand = c(0.02, 0)) +
  scale_y_continuous(limits = c(min(C4_cmap$cmap_score), max(C4_cmap$cmap_score)), 
                     expand = c(0.02, 0)) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(color = "black"),
        plot.margin = margin(10, 10, 10, 10),
        axis.text = element_text(size = 12, face = "bold"),  # Increase text size and make bold
        axis.title = element_text(size = 14, face = "bold"),  # Increase title size and make bold
        axis.ticks = element_line(color = "black", size = 0.5),  # Make ticks more visible
        axis.ticks.length = unit(0.2, "cm"))  # Increase tick length)

# Add stacked line effect for multiple compounds
p_C4 <- p_C4 +
  geom_point(data = label_compounds_C4, aes(x = rank, y = cmap_score), 
             color = "red", size = 3) +
  geom_text_repel(data = label_compounds_C4, 
                  aes(x = rank, y = cmap_score, 
                      label = paste0(drug, "\n", round(cmap_score, 4))),
                  color = "red", box.padding = 2, point.padding = 2, size = 6)

